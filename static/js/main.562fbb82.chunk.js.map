{"version":3,"sources":["components/Scheduler/Scheduler.js","components/Scheduler/index.js","components/Toolbar/Toolbar.js","components/Toolbar/index.js","components/MessageArea/MessageArea.js","components/MessageArea/index.js","App.js","index.js"],"names":["scheduler","window","Scheduler","_$initialized","onDataUpdated","this","props","attachEvent","id","ev","skin","config","header","hour_date","xy","scale_width","initSchedulerEvents","events","init","schedulerContainer","Date","clearAll","parse","nextProps","timeFormatState","render","state","templates","hour_scale","date","date_to_str","setHoursScaleFormat","ref","input","style","width","height","Component","Toolbar","handleTimeFormatStateChange","e","onTimeFormatStateChange","target","checked","className","type","onChange","MessageArea","messages","map","message","key","Math","random","defaultProps","data","App","currentTimeFormatState","logDataUpdate","action","text","addMessage","setState","length","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.562fbb82.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'dhtmlx-scheduler';\nimport 'dhtmlx-scheduler/codebase/dhtmlxscheduler_material.css';\n\nconst scheduler = window.scheduler;\n\nexport default class Scheduler extends Component {\n\n    initSchedulerEvents() {\n        if (scheduler._$initialized) {\n            return;\n        }\n\n        const onDataUpdated = this.props.onDataUpdated;\n\n        scheduler.attachEvent('onEventAdded', (id, ev) => {\n            if (onDataUpdated) {\n                onDataUpdated('create', ev, id);\n            }\n        });\n\n        scheduler.attachEvent('onEventChanged', (id, ev) => {\n            if (onDataUpdated) {\n                onDataUpdated('update', ev, id);\n            }\n        });\n\n        scheduler.attachEvent('onEventDeleted', (id, ev) => {\n            if (onDataUpdated) {\n                onDataUpdated('delete', ev, id);\n            }\n        });\n        scheduler._$initialized = true;\n    }\n\n    componentDidMount() {\n        scheduler.skin = 'material';\n        scheduler.config.header = [\n            'day',\n            'week',\n            'month',\n            'date',\n            'prev',\n            'today',\n            'next'\n        ];\n        scheduler.config.hour_date = '%g:%i %A';\n        scheduler.xy.scale_width = 70;\n\n        this.initSchedulerEvents();\n\n        const { events } = this.props;\n        scheduler.init(this.schedulerContainer, new Date());\n        scheduler.clearAll();\n        scheduler.parse(events);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return this.props.timeFormatState !== nextProps.timeFormatState;\n    }\n\n    componentDidUpdate() {\n        scheduler.render();\n    }\n\n    setHoursScaleFormat(state) {\n        scheduler.config.hour_date = state ? '%H:%i' : '%g:%i %A';\n        scheduler.templates.hour_scale = scheduler.date.date_to_str(scheduler.config.hour_date);\n    }\n\n    render() {\n        const { timeFormatState } = this.props;\n        this.setHoursScaleFormat(timeFormatState);\n        return (\n            <div\n                ref={ (input) => { this.schedulerContainer = input } }\n                style={ { width: '100%', height: '100%' } }\n            ></div>\n        );\n    }\n}\n","import Scheduler from './Scheduler';\nimport './Scheduler.css';\nexport default Scheduler;","import React, { Component } from 'react';\nexport default class Toolbar extends Component {\n    handleTimeFormatStateChange = (e) => {\n        if (this.props.onTimeFormatStateChange) {\n            this.props.onTimeFormatStateChange(e.target.checked)\n        }\n    }\n    render() {\n        return (\n            <div className='time-format-section'>\n                <label className='time-format-chkbx'>\n                    Time format: \n                    <input type='checkbox'\n                        checked={ this.props.timeFormatState }\n                        onChange={ this.handleTimeFormatStateChange }\n                    />\n                    <div className='chkbx-text'></div>\n                </label>\n            </div>\n        );\n    }\n}\n","import Toolbar from './Toolbar';\nimport './Toolbar.css';\nexport default Toolbar;\n\n","import React, { Component } from 'react';\n \nexport default class MessageArea extends Component {\n    render() {\n        const messages = this.props.messages.map(({ message }) => {\n            return <li key={ Math.random() }>{message}</li>\n        });\n \n        return (\n            <div className=\"message-area\">\n                <h3>Messages:</h3>\n                <ul>\n                    { messages }\n                </ul>\n            </div>\n        );\n    }\n}\n \nMessageArea.defaultProps = {\n    messages: []\n};\n","import MessageArea from './MessageArea';\nimport './MessageArea.css';\nexport default MessageArea;\n","import React, { Component } from 'react';\nimport Scheduler from './components/Scheduler';\nimport Toolbar from './components/Toolbar';\nimport MessageArea from './components/MessageArea';\nimport './App.css';\n\nconst data = [\n    \n];\n\nclass App extends Component {\n    state = {\n        currentTimeFormatState: true,\n        messages: []\n    };\n\n    addMessage(message) {\n        const maxLogLength = 5;\n        const newMessage = { message };\n        const messages = [\n            newMessage,\n            ...this.state.messages\n        ];\n\n        if (messages.length > maxLogLength) {\n            messages.length = maxLogLength;\n        }\n        this.setState({ messages });\n    }\n\n    logDataUpdate = (action, ev, id) => {\n        const text = ev && ev.text ? ` (${ev.text})` : '';\n        const message = `event ${action}: ${id} ${text}`;\n        this.addMessage(message);\n    }\n\n    handleTimeFormatStateChange = (state) => {\n        this.setState({\n            currentTimeFormatState: state\n        });\n    }\n    render() {\n        const { currentTimeFormatState, messages } = this.state;\n        return (\n            <div>\n                <div className=\"tool-bar\">\n                    <Toolbar\n                        timeFormatState={currentTimeFormatState}\n                        onTimeFormatStateChange={this.handleTimeFormatStateChange}\n                    />\n                </div>\n                <div className='scheduler-container'>\n                    <Scheduler\n                        events={data}\n                        timeFormatState={currentTimeFormatState}\n                        onDataUpdated={this.logDataUpdate}\n                    />\n                </div>\n                <MessageArea\n                    messages={messages}\n                />\n                </div>\n        );\n    }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}